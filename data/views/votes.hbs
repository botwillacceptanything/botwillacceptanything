<!-- view time readouts: setCookie("clock","yes",7) in the js console + reload -->

<div>

<span style="float:right">
  <canvas id="canvas" width="80" height="80"></canvas>
</span>

<div id="timeContainer">
  <span id="timeReadout">
    <p>Bot local time: {{now}} (+{{secondsPastMidnight}})</p>
    <p>Bot UTC time: {{now_utc}} (+{{secondsPastMidnightUTC}})</p>
    <p>Client local time: <span id="clientLocalTime"></span>
    <p>Client UTC time: <span id="clientUTCTime"></span>
    <script>
    var secondsPastMidnight = function (d) {
      return d.getSeconds() + 60 * d.getMinutes() + 60 * 60 * d.getHours();
    }
    var now = new Date();
    var now_utc = new Date(now.getUTCFullYear(),
        now.getUTCMonth(), now.getUTCDate(),
        now.getUTCHours(), now.getUTCMinutes(),
        now.getUTCSeconds());
    var clientLocalTimeElt = document.getElementById("clientLocalTime");
    clientLocalTimeElt.innerHTML = now+' (+'+secondsPastMidnight(now)+')';
    var clientUTCTimeElt = document.getElementById("clientUTCTime");
    clientUTCTimeElt.innerHTML = now_utc+' (+'+secondsPastMidnight(now_utc)+')';
    </script>
  </span> <!-- timeReadout -->
</div> <!-- timeContainer -->

<script>
var clockCookie = getCookie("clock");
if (clockCookie == "") {
    var timeContainer = document.getElementById("timeContainer");
    var timeReadout = document.getElementById("timeReadout");
    timeContainer.removeChild(timeReadout);
}

var canvas = document.getElementById("canvas");
var ctx = canvas.getContext("2d");
var radius = canvas.height / 2;
ctx.translate(radius, radius);
radius = radius * 0.90

function drawClock() {
  drawFace(ctx, radius*0.50);
  drawNumbers(ctx, radius);
  drawTime(ctx, radius*0.50);
}

function drawFace(ctx, radius) {
  var grad;
  ctx.beginPath();
  ctx.arc(0, 0, radius, 0, 2*Math.PI);
  ctx.fillStyle = 'white';
  ctx.fill();
  grad = ctx.createRadialGradient(0,0,radius*0.95, 0,0,radius*1.05);
  grad.addColorStop(0, '#333');
  grad.addColorStop(0.5, 'white');
  grad.addColorStop(1, '#333');
  ctx.strokeStyle = grad;
  ctx.lineWidth = radius*0.1;
  ctx.stroke();
  ctx.beginPath();
  ctx.arc(0, 0, radius*0.1, 0, 2*Math.PI);
  ctx.fillStyle = '#333';
  ctx.fill();
}

function drawNumbers(ctx, radius) {
  var ang;
  var num;
  ctx.font = radius*0.25 + "px arial";
  ctx.textBaseline="middle";
  ctx.textAlign="center";
  for(num = 1; num < 13; num++){
    ang = num * Math.PI / 6;
    ctx.rotate(ang);
    ctx.translate(0, -radius*0.85);
    ctx.rotate(-ang);
    ctx.fillText(num.toString(), 0, 0);
    ctx.rotate(ang);
    ctx.translate(0, radius*0.85);
    ctx.rotate(-ang);
  }
}

function drawTime(ctx, radius){
    var now = new Date();
    var now_utc = new Date(now.getUTCFullYear(),
        now.getUTCMonth(), now.getUTCDate(),
        now.getUTCHours(), now.getUTCMinutes(),
        now.getUTCSeconds());

    var hour = now_utc.getHours();
    var minute = now_utc.getMinutes();
    var second = now_utc.getSeconds();
    //hour
    hour=hour%12;
    hour=(hour*Math.PI/6)+
    (minute*Math.PI/(6*60))+
    (second*Math.PI/(360*60));
    drawHand(ctx, hour, radius*0.5, radius*0.07);
    //minute
    minute=(minute*Math.PI/30)+(second*Math.PI/(30*60));
    drawHand(ctx, minute, radius*0.8, radius*0.07);
    // second
    second=(second*Math.PI/30);
    drawHand(ctx, second, radius*0.9, radius*0.02);
}

function drawHand(ctx, pos, length, width) {
    ctx.beginPath();
    ctx.lineWidth = width;
    ctx.lineCap = "round";
    ctx.moveTo(0,0);
    ctx.rotate(pos);
    ctx.lineTo(0, -length);
    ctx.stroke();
    ctx.rotate(-pos);
}
drawClock();
</script>

{{#each repositories}}
  <h2>{{this.repo.user}}/{{this.repo.repo}}</h2>
  <ul style="display: inline-block">
    {{#each this.votesPerPR}}
      <li>
        #{{this.pr.number}} - {{this.pr.title}} by <strong><a href="https://github.com/{{this.pr.user.login}}">{{this.pr.user.login}}</a></strong> -
        Yes: {{this.votes.positive}}, No: {{this.votes.negative}} -
        <a href="{{this.pr.html_url}}" target="_blank">Pull Request</a>
      </li>
    {{else}}
      <li>No votes in progress</li>
    {{/each}}
  </ul>
{{/each}}
